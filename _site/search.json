[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jia Rong’s Visual Analytics & Applications Coursework",
    "section": "",
    "text": "Check out my latest posts:\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 05d: Visual Multivariate Analysis with Parallel Coordinates Plot\n\n\n\n\n\n\nMoo Jia Rong\n\n\nFeb 12, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 05e: Treemap Visualisation with R\n\n\n\n\n\n\nMoo Jia Rong\n\n\nFeb 12, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 05c: Heatmap for Visualising and Analysing Multivariate Data\n\n\n\n\n\n\nMoo Jia Rong\n\n\nFeb 11, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex03b.html",
    "href": "Hands_on_Exercise/Hands-on_Ex03b.html",
    "title": "Hands-on Exercise 03b: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "Overview\nWhen telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, we will create animated data visualisation by using gganimate and plotly r packages.\nAt the same time, we will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n1.1 Basic concepts of animation\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n1.2 Terminology\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n2 Getting Started\nWe first install the required R packages & load the dataset\n\nLoad Dataset\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\nBuilding a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\nBuilding the animated bubble plot\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\ntransition_reveal() can be used to let data gradually appear across axis\n\n\nTransition with timeWith facet wrapTransition reveal\n\n\n\n\nShow the code\np&lt;- ggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')   \n\np\n\n\n\n\n\n\n\n\n\n\n\n\np + facet_wrap(~Continent)        \n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np2&lt;- ggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') +\n  transition_reveal(Old) +       \n  ease_aes('linear')   \n\np2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n4.1 Building an animated bubble plot: ggplotly() method\nThe animated bubble plot below includes a play/pause button and a slider component for controlling the animation\n\n\nShow the code\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\n\nShow the code\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n4.2 Building an animated bubble plot: plot_ly() method\n\n\nShow the code\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\n\n\n\n\n\n\n\n\n5 References\n\nGetting Started\nBuilding an animation step-by-step with gganimate\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 3b"
    ]
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex02.html",
    "href": "Hands_on_Exercise/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "1 Overview\nIn this exercise, we will be using ggplot2 extensions to create more elegant and effective statistical graphics. The goal of this exercise is to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package.\n\n\n\n2 Getting Started\n\nLoad PackagesImport Dataset\n\n\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\n3 Beyond ggplot2 Annotation: ggrepel\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our example above.\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n4 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\n\nShow the code\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\n\nShow the code\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used. The second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used.\n\nDefaultChanging Theme Settings\n\n\n\n\nShow the code\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.\n\n\n\nShow the code\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5 Beyond Single Graph\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, we will create composite plot by combining multiple graphs. First, create three statistical graphics by using the code chunk below.\n\nMath ScoresEnglish ScoresScatter Plot\n\n\n\n\nShow the code\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\np1\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\np2\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\np3\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, we will use an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /.\n\n\n\n5.2 Combining two ggplot2 graphs\nFigure below shows a composite of two histograms created using patchwork.\n\ntwo columntwo row\n\n\n\np1+p2\n\n\n\n\n\n\n\n\n\n\n\np1/p2\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\n5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\n5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n6 References\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex00.html",
    "href": "Hands_on_Exercise/Hands-on_Ex00.html",
    "title": "Hands-on Exercise 00: working with tidyverse",
    "section": "",
    "text": "Getting started\n\nLoading tidyverse onto r environment by using the code chunk below.\n\npacman::p_load(tidyverse)\n\n\n\nImporting data\n\nrealis2019 &lt;- read_csv('data/REALIS2019.csv')\n\n\npopdata_fat &lt;- read_csv('data/PopData2019_fat.csv')\n\n\n\nPivoting data\n\npopdata_long &lt;- popdata_fat %&gt;% \n  pivot_longer(c(3:21),\n               names_to = \"Age Group\",\n               values_to = \"Population\")\n\n\n\nSaving the data\n\nwrite_rds(popdata_long, 'rds/popdata_long.rds')\n\n\n\n\nRetrieving the rds files\n\nworking with dplyr\n\nrealis2019_selected &lt;- realis2019 %&gt;%\n  select('Project Name',\n         'Transacted Price ($)',\n         'Type of Sale',\n         'Unit Price ($ psm)',\n         'Property Type')\nrealis2019_selected\n\n# A tibble: 19,515 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 PEIRCE VIEW                        840000 Resale                         7434\n 2 FLORIDA PARK                      3040000 Resale                         9737\n 3 BULLION PARK                       860000 Resale                        11467\n 4 CASTLE GREEN                      1000000 Resale                         9346\n 5 HAPPY ESTATE                      7000000 Resale                        10183\n 6 TEACHER'S HOUSING…                2880000 Resale                        12659\n 7 THE PANORAMA                      1510000 Resale                        16064\n 8 THE PANORAMA                       710000 Resale                        16905\n 9 CHIP THYE GARDEN                  2800000 Resale                        13500\n10 TEACHER'S HOUSING…                2300000 Resale                         9935\n# ℹ 19,505 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\n\n\nworking with filter() of dplyr.\n\nrealis2019_filtered &lt;- realis2019_selected %&gt;%\n  filter(`Property Type` == 'Condominium'|\n           `Property Type` == 'Apartment') %&gt;%\n  filter(`Type of Sale` == 'New Sale') %&gt;%\n  filter(`Unit Price ($ psm)` &lt;= 13000)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hi, I am Jia Rong. This website details my journey through the ISSS608 Visual Analytics and Applications course as part of my Master of IT in Business programme at SMU."
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex01.html",
    "href": "Hands_on_Exercise/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 01: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "",
    "text": "1 Overview\nIn this exercise, I will be exploring the basic principles and essential components of ggplot2 to plot statistical graphics based on the principle of Layered Grammar of Graphics.\n\n\n2 Getting Started\n\nLoading LibrariesImporting Dataset\n\n\nWe will load the tidyverse library\n\npacman::p_load(tidyverse)\n\n\n\nIn this exercise, we will be using the exam data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\n3 R graphics vs ggplot\n\nR Graphicsggplot2\n\n\n\n\nShow the code\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2 is preferred over the built-in plot function due to the following reason:\n“The transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.” - Hadley Wickham\n\n\n4 Grammer of Graphics\nGrammar of Graphics is a general scheme introduced by Leland Wilkinson (1999) for data visualization, which breaks up graphs into semantic components such as scales and layers. It defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nThe figure below shows the seven grammars of ggplot2\n\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n\n\n5 Essential Grammatical Elements in ggplot2: data\nLet us call the ggplot() function using the code chunk below\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify().\n\n\n\n\n\n6 Essential Grammatical Elements in ggplot2: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call.\nThe code chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nggplot includes the x-axis and the axis’s label.\n\n\n\n\n7 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts) geom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map\n\n\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator. -For complete list, please refer to here\n\n\n7.1 geom_bar\nThe code chunk below plots a bar chart by using geom_bar()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n7.2 geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBe warned\n\n\n\nggplot includes the x-axis and the axis’s label.\n\n\nThe code chunk below performs the following two steps: - scale_y_continuous() is used to turn off the y-axis, and - binwidth argument is used to change the binwidth to 2.5.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n7.3 geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\n7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\n7.5 Modifying a geometric object by changing aes()\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic(). This approach can be used to colour, fill and alpha of the geometric.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n7.6 geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n7.7 geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n7.8 geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n7.9 geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()     \n\n\n\n\n\n\n\n\n\n\n7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)        \n\n\n\n\n\n\n\n\n\n\n\n8 Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\n\n8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess.\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n\n\n\n\n\n\n\n\n\n\n9 Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n10 Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n10.1 Working with Coordinate\nBy default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n10.2 Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n\n\n\n\n\n\n\n\n\n11 Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n11.1 Working with theme\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n12 References\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex03a.html",
    "href": "Hands_on_Exercise/Hands-on_Ex03a.html",
    "title": "Hands-on Exercise 03a: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "1 Learning Outcome\nIn this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\n2 Getting Started\n\nLoading LibrariesImporting Dataset\n\n\nWe will install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\n\nIn this exercise, we will be using the exam data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\n3 Interactive Data Visualisation - ggiraph methods\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides.\n\n3.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package.\nThe graph is generated in 2 steps. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\nAdditional features:\n\nopts_zoom: When zoom_max (maximum zoom factor) is set to a value greater than 1, a toolbar will appear to enable zoom view.\n\n\nDefaultEnabling Zoom-ins\n\n\n\n\nShow the code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover_inv(css = \"opacity:0.1;\")\n))\n\n\n\n\n\n\n\n\n\n\nShow the code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID, data_id = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover_inv(css = \"opacity:0.1;\"),\n    opts_zoom(max = 5)\n))\n\n\n\n\n\n\n\n\n\n\n3.1.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\nThe first three lines of codes in the code chunk create a new field called tooltip in the dataset. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7. This enables both name and class information to be displayed.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n3.1.2 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\nBlack and Bold fontEditing Font Family and Size\n\n\n\n\nShow the code\ntooltip_css &lt;- \"background-color:white; \nfont-style:bold; color:black;\" \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    \n    opts_tooltip(    \n      css = tooltip_css)) \n)                                        \n\n\n\n\n\n\n\n\n\n\nShow the code\ntooltip_css &lt;- \"background-color:white;\nfont-style:bold; color:black; font-family: Roboto;font-size:1rem\"\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    \n    opts_tooltip(    \n      css = tooltip_css)) \n)                                        \n\n\n\n\n\n\n\n\n\n\n\n3.1.3 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip\n\n\nShow the code\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n\n3.1.4 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nThe default value of the hover css is hover_css = “fill:orange;”. We can change this colour by editing options in ‘girafe()’\n\nDefaultChange hover colour\n\n\n\n\nShow the code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\n\n\n\n\nShow the code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill:red;\")\n))                                        \n\n\n\n\n\n\n\n\n\n\n\n3.1.5 Styling hover effect\nIn the code chunk below, we can reduce opacity of the non-hovered elements to highlight the hover elements\n\n\nShow the code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\nopts_hover_inv: controls aesthetics of elements that are not hovered over\nopts_hover: controls aesthetics of elements that are hovered over\n\n\n\n3.1.6 Combining tooltip and hover effect\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\nShow the code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n3.1.7 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click\n\n\nShow the code\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)   \n\n\n\n\n\n\nIn the codes above, we added a new field named onclick into the dataset, which contains the link to open when users click on the graph\n\n\n3.1.8 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\nShow the code\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\n\n\n4 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n4.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly()\nNotice that in the plot, labels are shown when the mouse hovers over a point, without needing to specify unlike in the examples above using tooltip with the ggiraph package\n\n\nShow the code\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n\n4.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\n\nShow the code\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n\n4.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\n\nShow the code\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n4.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\n5 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n5.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n5.2 Linked brushing: crosstalk method\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhighlight_key(): create a unique identifier for each row in a data frame, based on its values. The resulting identifier is used to keep track of the rows that have been selected or highlighted on a plot, particularly when using the highlight() function.\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side.\ncrosstalk::bscols(): creates a Bootstrap column layout. The first argument is the left column, and the second argument is the right column. The widths argument is used to specify the relative width of the two columns, with the default value being 6 for both.\n\n\n\n\n6 References\n\n6.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n6.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 3a"
    ]
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex04a.html",
    "href": "Hands_on_Exercise/Hands-on_Ex04a.html",
    "title": "Hands-on Exercise 04a: Visualising Distribution",
    "section": "",
    "text": "Learning Outcome\nVisualising distribution is not new in statistical analysis. In chapter 1 we shared some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we will explore two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.\n\n\n2 Getting Started\nFor the purpose of this exercise, the Exam_data.csv dataset and the following R packages will be used:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\n\nLoading PackagesImporting Dataset\n\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\n3 Visualising Distribution with Ridgeline Plot\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n3.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, we will plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\n\nShow the code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n3.2 Varying fill colors along the x axis\nTo have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis, we can use either geom_ridgeline_gradient() or geom_density_ridges_gradient().\nBoth geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\n\nShow the code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n3.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n4 Visualising Distribution with Raincloud Plot\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, we will create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\n\nShow the code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\n4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n\nShow the code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\n\n4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\n\nShow the code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\n4.4 Finishing Touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n\nShow the code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n5 References\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 4a"
    ]
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex04b.html",
    "href": "Hands_on_Exercise/Hands-on_Ex04b.html",
    "title": "Hands-on Exercise 04b: Visual Statistical Analysis",
    "section": "",
    "text": "1 Overview\nIn this exercise, we will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters\n\n\n\n2 Getting Started\n\nLoading LibrariesImport dataset\n\n\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\nexam\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows\n\n\n\n\n\n\n\n3 Statistical Tests\n\n3.1 One-sample test: gghistostats() method\nghistostats() can be used to build an visual of one-sample test on English scores.\nIn addition, we can use grouped_gghistostats() to separate the tests by group.\n\nnon-groupedgrouped\n\n\n\n\nShow the code\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nset.seed(1234)\n\ngrouped_gghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\",\n  grouping.var      = GENDER\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.2 Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10.\n\n\n\n3.3 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\nWe can change the colors by specifying package (package from which color palette is to be taken) and palette.\n\nDefaultChanging color palette\n\n\n\n\nShow the code\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE,\n  package = \"ggsci\",\n  palette = \"nrc_npg\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\nApart from being able to change the color palattes,\n\nThe type (of test) argument also accepts the following abbreviations: “p” (for parametric), “np” (for nonparametric), “r” (for robust), “bf” (for Bayes Factor).\nThe type of plot to be displayed can also be modified (“box”, “violin”, or “boxviolin”). The default is boxviolin\n\n\nBoxViolin\n\n\nviolin.args can be modified to remove the violin\n\n\nShow the code\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE,\n  # to remove violin plot\n  violin.args = list(width = 0)\n)\n\n\n\n\n\n\n\n\n\n\n\nboxplot.args can be modified to remove the boxplot\n\n\nShow the code\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE,\n  # to remove box plot\n  boxplot.args = list(width = 0)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.4 Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\npairwise.display has three options, ‘ns’: shows only non-signififcant, ‘s’: shows only significant, ‘all’: displays all pairwise comparisons\np.adjust.method determines the method for adjusting p-values for multiple tests\n\n\n\nShow the code\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n3.5 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\n\nShow the code\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n\n3.6 Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER\n           )\n\n\n\n\n\n\n\n\nTo change the display of percentages to include decimal points, we can modify the digits.perc argument\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER,\n           digits.perc = 1)\n\n\n\n\n\n\n\n\n\n\n\n4 Visualising Models\nIn this section, we will visualise model diagnostic and model parameters by using parameters package.\nThe Toyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.\n\n4.1 Getting Started\n\nLoading packagesImporting dataset\n\n\n\npacman::p_load(readxl, performance, parameters, see)\n\n\n\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\n\n\n\n\n4.2 Multiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n4.3 Model Diagnostic: checking for multicolinearity:\nIn the code chunk below, check_collinearity() of performance package is used to check for multicolinearity of variables included in the regression model.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\n\n4.4 Model Diagnostic: checking normality assumption\nIn the code chunk below, check_normality() of performance package is used to check for normality of the variables.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\ncheck_n &lt;- check_normality(model1)\n\nplot(check_n)\n\n\n\n\n\n\n\n\n\n\n4.5 Model Diagnostic: Check model for homogeneity of variances\nIn the code chunk below, check_heteroscedasticity() of performance package is used to check for homogeneity of variances.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\n4.6 Model Diagnostic: Complete check\nAlternatively, We can also perform all the checks at once by using check_model().\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\n4.7 Visualising Regression Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\n4.8 Visualising Regression Parameters: ggcoefstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 4b"
    ]
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "1 Overview\n\n1.1 Background\nHeart attack is one of the leading causes of mortality globally. According to findings of research studies, heart attacks are increasingly common in young adults (aged 40 or below). The alarming trend highlights a need to understand the potential causes and risk factors of early heart attacks through examining the profiles of young adult and older adult patients, including demographic, lifestyle factors and medical history, to enable early detection and enforcement of preventive measures.\n\n\n1.2 Dataset\nIn this exercise, we have obtained a dataset on heart attack incidents in Japan from Kaggle, consisting of data on individuals aged 18 to 79.\n\n\n1.3 Objectives\nAs part of an international media company that publishes weekly content on digital platforms, we will Use the Japan heart attack dataset to perform Exploratory Data Analysis and generate statistical visualisations for an article, covering insights on:\n\nThe general profile of Japan population\nTrends and associations of heart attack occurrence with demographic, lifestyle factors and medical history in the Japan populations.\nAge-specific factors for heart attack occurrence\n\n\n\n\n2 Getting Started\n\n2.1 Loading Packages\nThe R packages used in this exercise includes:\n\ntidyverse (i.e. readr, tidyr, dplyr, ggplot2) for performing data science tasks such as importing, tidying, and wrangling data, as well as creating graphs\nknitr for displaying tables\npatchwork for preparing composite figure created using ggplot2\nggstats for creating diverging barplots\nggdist for visualising distributions and uncertainty\nggmosaic for creating mosaic plots\nggstatsplot for visualising significant test of association using stacked barplots\n\n\npacman::p_load(tidyverse,knitr, patchwork,ggstats, ggdist,ggmosaic, ggstatsplot)\n\n\n\n2.2 Importing Data\nThe dataset used in this exercise is the japan_heart_attack_dataset.csv file downloaded from Kaggle. The file is imported into R environment using read_csv().\nUsing the glimpse() function, we observe that the dataset consists of 30,000 records spanning across 32 columns. Of which, there are 17 relevant variables and 15 extra column variables which are irrelevant to our analysis.\nIn addition, by viewing the first few entries of each column, we can see that there are both categorical and continuous variables in the dataset.\nWith a focus on the 17 relevant variables, a data dictionary table is generated, showing the range for the 7 continuous variables and the unique values for the 10 categorical variables.\n\nImport dataGlimpse dataData dictionary\n\n\n\nheart_attack &lt;- read_csv(\"data/japan_heart_attack_dataset.csv\")\n\n\n\n\nglimpse(heart_attack)\n\nRows: 30,000\nColumns: 32\n$ Age                     &lt;dbl&gt; 56, 69, 46, 32, 60, 25, 78, 38, 56, 75, 36, 40…\n$ Gender                  &lt;chr&gt; \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"F…\n$ Region                  &lt;chr&gt; \"Urban\", \"Urban\", \"Rural\", \"Urban\", \"Rural\", \"…\n$ Smoking_History         &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Y…\n$ Diabetes_History        &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Hypertension_History    &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Cholesterol_Level       &lt;dbl&gt; 186.4002, 185.1367, 210.6966, 211.1655, 223.81…\n$ Physical_Activity       &lt;chr&gt; \"Moderate\", \"Low\", \"Low\", \"Moderate\", \"High\", …\n$ Diet_Quality            &lt;chr&gt; \"Poor\", \"Good\", \"Average\", \"Good\", \"Good\", \"Go…\n$ Alcohol_Consumption     &lt;chr&gt; \"Low\", \"Low\", \"Moderate\", \"High\", \"High\", \"Hig…\n$ Stress_Levels           &lt;dbl&gt; 3.644786, 3.384056, 3.810911, 6.014878, 6.8068…\n$ BMI                     &lt;dbl&gt; 33.96135, 28.24287, 27.60121, 23.71729, 19.771…\n$ Heart_Rate              &lt;dbl&gt; 72.30153, 57.45764, 64.65870, 55.13147, 76.667…\n$ Systolic_BP             &lt;dbl&gt; 123.90209, 129.89331, 145.65490, 131.78522, 10…\n$ Diastolic_BP            &lt;dbl&gt; 85.68281, 73.52426, 71.99481, 68.21133, 92.902…\n$ Family_History          &lt;chr&gt; \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No…\n$ Heart_Attack_Occurrence &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n$ Extra_Column_1          &lt;dbl&gt; 0.40498852, 0.03627815, 0.85297888, 0.39085280…\n$ Extra_Column_2          &lt;dbl&gt; 0.43330004, 0.51256694, 0.21959083, 0.29684675…\n$ Extra_Column_3          &lt;dbl&gt; 0.62871236, 0.66839275, 0.61343656, 0.15572404…\n$ Extra_Column_4          &lt;dbl&gt; 0.70160955, 0.11552874, 0.50800995, 0.87025144…\n$ Extra_Column_5          &lt;dbl&gt; 0.49814235, 0.42381938, 0.90066981, 0.39035591…\n$ Extra_Column_6          &lt;dbl&gt; 0.007901312, 0.083932768, 0.227205241, 0.40318…\n$ Extra_Column_7          &lt;dbl&gt; 0.79458257, 0.68895108, 0.49634358, 0.74140891…\n$ Extra_Column_8          &lt;dbl&gt; 0.29077922, 0.83016364, 0.75210679, 0.22396813…\n$ Extra_Column_9          &lt;dbl&gt; 0.49719307, 0.63449028, 0.18150125, 0.32931387…\n$ Extra_Column_10         &lt;dbl&gt; 0.52199452, 0.30204337, 0.62918031, 0.14319054…\n$ Extra_Column_11         &lt;dbl&gt; 0.79965663, 0.04368285, 0.01827617, 0.90778075…\n$ Extra_Column_12         &lt;dbl&gt; 0.72239788, 0.45166789, 0.06322702, 0.54232201…\n$ Extra_Column_13         &lt;dbl&gt; 0.1487387, 0.8786714, 0.1465122, 0.9224606, 0.…\n$ Extra_Column_14         &lt;dbl&gt; 0.8340099, 0.5356022, 0.9972962, 0.6262165, 0.…\n$ Extra_Column_15         &lt;dbl&gt; 0.061632229, 0.617825340, 0.974455410, 0.22860…\n\n\n\n\n\n\nShow the code\ndata_dict &lt;- data.frame(matrix(ncol = 3, nrow = 0))\nx &lt;- c(\"Variable\", \"Type\", \"Values\")\ncolnames(data_dict) &lt;- x\n\ncolumn_names &lt;- colnames(heart_attack)[1:17]\nfor (column in column_names){\n  values &lt;- heart_attack[, column]\n  if (class(heart_attack[[column]])==\"numeric\"){\n    col_label&lt;-paste0(\"(\", round(min(values), digits=2), \", \", round(max(values), digits=2), \")\")\n    col_type=\"Continuous\"\n  }\n  else {\n    col_label&lt;-paste0(unique(values))\n    col_type=\"Categorical\"\n  }\n  new.row &lt;- data.frame(Variable = column, Type = col_type , Values = col_label)\n  data_dict &lt;- rbind(data_dict, new.row)\n  \n}\n\ndata_dict[\"Description\"]&lt;- c(\"\",\"\",\"\",\"\",\"\", \"Patient hypertension ( high blood pressure) history\n\", \"normal total cholesterol level (mg/dL) &lt; 200 \n\", \"\",\"\",\"\",\"\", \"Healthy BMI range is 18.5 to 24.9\n\", \"\", \"Normal systolic  blood pressure (mmHg) &lt;120 \n\", \"Normal diastolic  blood pressure (mmHg) &lt;80\n\", \"\",\"\")\n\nknitr::kable(data_dict, \"html\")\n\n\n\n\n\nVariable\nType\nValues\nDescription\n\n\n\n\nAge\nContinuous\n(18, 79)\n\n\n\nGender\nCategorical\nc(\"Male\", \"Female\")\n\n\n\nRegion\nCategorical\nc(\"Urban\", \"Rural\")\n\n\n\nSmoking_History\nCategorical\nc(\"Yes\", \"No\")\n\n\n\nDiabetes_History\nCategorical\nc(\"No\", \"Yes\")\n\n\n\nHypertension_History\nCategorical\nc(\"No\", \"Yes\")\nPatient hypertension ( high blood pressure) history\n\n\nCholesterol_Level\nContinuous\n(80.02, 336.86)\nnormal total cholesterol level (mg/dL) &lt; 200\n\n\nPhysical_Activity\nCategorical\nc(\"Moderate\", \"Low\", \"High\")\n\n\n\nDiet_Quality\nCategorical\nc(\"Poor\", \"Good\", \"Average\")\n\n\n\nAlcohol_Consumption\nCategorical\nc(\"Low\", \"Moderate\", \"High\", \"None\")\n\n\n\nStress_Levels\nContinuous\n(0, 10)\n\n\n\nBMI\nContinuous\n(5.58, 46.1)\nHealthy BMI range is 18.5 to 24.9\n\n\nHeart_Rate\nContinuous\n(30.03, 108.78)\n\n\n\nSystolic_BP\nContinuous\n(56.23, 178.77)\nNormal systolic blood pressure (mmHg) &lt;120\n\n\nDiastolic_BP\nContinuous\n(39.95, 117.67)\nNormal diastolic blood pressure (mmHg) &lt;80\n\n\nFamily_History\nCategorical\nc(\"No\", \"Yes\")\n\n\n\nHeart_Attack_Occurrence\nCategorical\nc(\"No\", \"Yes\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3 Data Wrangling\n\n3.1 Removing irrelevant data\nWe first remove the 15 ‘extra columns’ in the dataset, which are irrelvant for our analysis, using the code below.\n\ndf&lt;-heart_attack[, 1:17]\n\nThis leaves us with just 17 variables:\nGeneral Demographic Variables\n\nAge\nGender\nRegion\nBMI\n\nLifestyle Factors\n\nSmoking_History\nPhysical_Activity\nDiet_Quality\nAlcohol_Consumption\nStress_Levels\n\nMedical History\n\nDiabetes_History\nHypertension_History\nCholesterol_Level\nHeart_Rate\nSystolic_BP\nDiastolic_BP\nFamily_History\nHeart_Attack_Occurrence\n\n\n\n3.2 Check for duplicated or missing values\nNext, the duplicated() and is.na() functions are used to check for duplicate records and missing values in the dataset respectively.\nThere are no duplicated records or missing values in this dataset.\n\nDuplicated recordsMissing values\n\n\n\ndf[duplicated(df),]\n\n# A tibble: 0 × 17\n# ℹ 17 variables: Age &lt;dbl&gt;, Gender &lt;chr&gt;, Region &lt;chr&gt;, Smoking_History &lt;chr&gt;,\n#   Diabetes_History &lt;chr&gt;, Hypertension_History &lt;chr&gt;,\n#   Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;, Diet_Quality &lt;chr&gt;,\n#   Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;, BMI &lt;dbl&gt;,\n#   Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;\n\n\n\n\n\nsum(is.na(df))\n\n[1] 0\n\n\n\n\n\n\n\n3.3 Recode Age\nThe age distribution in the population is shown in the histogram below. There is a relatively even spread of records from young to old.\n\n\nShow the code\nggplot(df, aes(Age)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"#7F948F\") +\n  labs(title = \"Frequency of Age\")\n\n\n\n\n\n\n\n\n\nTo facilitate comparison of profiles of younger versus older heart attack patients, we can create a new variable named Age_Group to bin the records into different age groups using ifelse statements:\n\nYoung Adults: 18-39\nMiddle-aged Adults: 40-65\nOld Adults: 66-79\n\n\ndf$Age_Groups &lt;- ifelse(df$Age&lt;=35, \"Young\", ifelse(df$Age&lt;=65, \"Middle-aged\", \"Old\"))\n\n\n\n3.4 Recode BMI\nThe BMI distribution in the population is shown in the histogram below. We can observe that the BMI distribution resembles a normal distribution and about half of the population has BMI &gt; 25, which is above the healthy range. For better comparisons in our analyses, we should bin BMI.\n\n\nShow the code\nggplot(df, aes(BMI)) +\n  geom_histogram(boundary = 100,\n                 color=\"black\", \n                 fill=\"#7F948F\") +\n  labs(title = \"Frequency of BMI\")\n\n\n\n\n\n\n\n\n\nBMI can be further categorised according to the criterion below, according to definition by Centers for Disease Control and Prevention:\n\nUnderweight: &lt;18.5\nNormal: 18.5 to &lt;25\nOverweight: 25 to &lt;30\nObese: ≥30\n\n\ndf$BMI_Category &lt;- ifelse(df$BMI&lt;18.5, \"Underweight\", \n                          ifelse(df$BMI&lt;25, \"Normal\", \n                                 ifelse(df$BMI&lt;30, \"Overweight\", \"Obese\")))\n\n\n\n3.5 Creating blood pressure variable\nAs the dataset provides the Systolic and Diastolic Blood Pressures, we can use these information to further categorise the population based on their blood pressure category, according to the criterion shown in the figure below.\n\n\n\nSource: American Heart Association\n\n\nThe distribution of the Systolic and Diastolic blood pressures are shown in the figure below. There are no records with hypertensive crisis (Systolic BP &gt; 180 mmHg or Diastolic BP &gt; 120 mmHg). Therefore, we will only have 4 blood pressure groups: Normal, Elevated, Hypertension I and Hypertension II.\n\n\nShow the code\np1&lt;-ggplot(df, aes(Systolic_BP)) +\n  geom_histogram(bins=20,\n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"thistle\") +\n  scale_x_continuous(n.breaks = 10) +\n  labs(title = \"Frequency of Systolic BP\") +\n  xlab(\"Systolic BP (mmHg)\")\n\np2&lt;-ggplot(df, aes(Diastolic_BP)) +\n  geom_histogram(bins=20,\n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"lightsteelblue\") +\n  labs(title = \"Frequency of Diastolic BP\")+\n  xlab(\"Diastolic BP (mmHg)\")\n\np1 + p2 + plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\ndf$Blood_Pressure &lt;- ifelse(df$Systolic_BP&lt;120 & df$Diastolic_BP&lt;80, \"Normal\", \n                            ifelse(df$Systolic_BP&lt;130 & df$Diastolic_BP&lt;80, \"Elevated\", \n                                   ifelse((df$Systolic_BP&gt;=130 & df$Systolic_BP&lt;140)|\n                                            ( df$Diastolic_BP&lt;90 & df$Diastolic_BP&gt;=80), \"Hypertension I\", \"Hypertension II\")))\n\n\n\n3.6 Recode Cholesterol Level\nTotal Cholesterol Level can also be further categorised according to the criterion below:\n\n\n\nSource: Singapore Heart Foundation\n\n\n\ndf$Cholesterol_Category &lt;- ifelse(df$Cholesterol_Level&lt;200, \"Normal\", ifelse(df$Cholesterol_Level&lt;240, \"Borderline High\", \"High\"))\n\n\n\n3.7 Ordering levels for ordinal categorical variables\nFor ordinal categorical variables, we will order the different levels in an ascending order using factor(), so that the results will be displayed according to the order we have set in the graphs we will plot subsequently in our analysis.\n\ndf$Physical_Activity &lt;- factor(df$Physical_Activity, \n                               levels = c(\"Low\", \"Moderate\", \"High\"), ordered = TRUE )\n\ndf$Diet_Quality &lt;- factor(df$Diet_Quality, \n                          levels = c(\"Poor\", \"Average\", \"Good\"), ordered = TRUE)\n\ndf$Alcohol_Consumption &lt;- factor(df$Alcohol_Consumption, \n                                 levels = c(\"None\", \"Low\", \"Moderate\", \"High\"), ordered = TRUE)\n\ndf$Age_Groups &lt;- factor(df$Age_Groups, \n                                 levels = c(\"Young\", \"Middle-aged\", \"Old\"), ordered = TRUE)\n\ndf$BMI_Category &lt;- factor(df$BMI_Category, \n                                 levels = c(\"Underweight\", \"Normal\", \"Overweight\", \"Obese\"), ordered = TRUE)\n\ndf$Blood_Pressure &lt;- factor(df$Blood_Pressure, \n                                 levels = c(\"Normal\", \"Elevated\", \"Hypertension I\", \"Hypertension II\"), ordered = TRUE)\n\ndf$Cholesterol_Category &lt;- factor(df$Cholesterol_Category, \n                                 levels = c(\"Normal\", \"Borderline High\", \"High\"), ordered = TRUE)\n\nThe first 5 results of the final dataset are displayed below using kable() of the knitr package.\n\nkable(head(df, n=5), caption = \"Heart Attack in Japan\")\n\n\nHeart Attack in Japan\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAge\nGender\nRegion\nSmoking_History\nDiabetes_History\nHypertension_History\nCholesterol_Level\nPhysical_Activity\nDiet_Quality\nAlcohol_Consumption\nStress_Levels\nBMI\nHeart_Rate\nSystolic_BP\nDiastolic_BP\nFamily_History\nHeart_Attack_Occurrence\nAge_Groups\nBMI_Category\nBlood_Pressure\nCholesterol_Category\n\n\n\n\n56\nMale\nUrban\nYes\nNo\nNo\n186.4002\nModerate\nPoor\nLow\n3.644786\n33.96135\n72.30153\n123.9021\n85.68281\nNo\nNo\nMiddle-aged\nObese\nHypertension I\nNormal\n\n\n69\nMale\nUrban\nNo\nNo\nNo\n185.1367\nLow\nGood\nLow\n3.384056\n28.24287\n57.45764\n129.8933\n73.52426\nYes\nNo\nOld\nOverweight\nElevated\nNormal\n\n\n46\nMale\nRural\nYes\nNo\nNo\n210.6966\nLow\nAverage\nModerate\n3.810911\n27.60121\n64.65870\n145.6549\n71.99481\nNo\nNo\nMiddle-aged\nOverweight\nHypertension II\nBorderline High\n\n\n32\nFemale\nUrban\nNo\nNo\nNo\n211.1655\nModerate\nGood\nHigh\n6.014878\n23.71729\n55.13147\n131.7852\n68.21133\nNo\nNo\nYoung\nNormal\nHypertension I\nBorderline High\n\n\n60\nFemale\nRural\nNo\nNo\nNo\n223.8143\nHigh\nGood\nHigh\n6.806883\n19.77158\n76.66792\n100.6946\n92.90249\nNo\nNo\nMiddle-aged\nNormal\nHypertension II\nBorderline High\n\n\n\n\n\n\n\n\n4 Exploratory Data Analysis and Statistical Visualisations\nIn this section, we will be conducting Exploratory Data Analysis on the processed dataset named df.\nBefore diving into the analysis, we first take a look at the distribution of some of the key variables closely-linked to heart attack in the Japan population: Age group, Cholesterol Level, Blood Pressure, BMI category and heart attack occurrence.\nThe ggplot() and geom_bar() functions from the ggplot2 package was used to generate the bar charts. stat = 'count' argument and geom_text() was used to add percentage annotations onto the bar chart. The bar chart colors were set using scale_fill_manual(). The axis labels were defined using labs(). The aesthetics of the bar charts were further customised using theme(). Individual plots were combined using patchwork package.\n\n\nShow the code\np1&lt;-ggplot(data=df,aes(x=Age_Groups, fill=Age_Groups))+\n  geom_bar(stat = \"count\")+\n  scale_fill_manual(values=c(\"lightsteelblue\",\"lightcyan3\",\"thistle\"))+\n  geom_text(\n    aes(\n      label = scales::percent(..count../sum(..count..), accuracy = 0.1)  # Calculate percentage using sum of counts\n    ),\n    stat = \"count\",\n    vjust = 1.25,  # Adjust text placement \n    size=3\n  ) +\n  theme(axis.ticks.x = element_blank(), legend.position = \"None\")+\n  labs(x = \"Age Group\")\n\np2&lt;-ggplot(data=df,aes(x=Blood_Pressure, fill=Blood_Pressure))+\n  geom_bar(stat = \"count\")+\n  scale_fill_manual(values=c(\"lightsteelblue\",\"lightcyan3\",\"thistle\",\"rosybrown2\" ))+\n  geom_text(\n    aes(\n      label = scales::percent(..count../sum(..count..), accuracy = 0.1)  # Calculate percentage using sum of counts\n    ),\n    stat = \"count\",\n    vjust = 1.25,  # Adjust text placement \n    size=3\n  ) +\n  theme( axis.ticks.x = element_blank(), legend.position = \"None\" )+\n  labs(x = \"Blood Pressure\")\n\np3&lt;- ggplot(data=df,aes(x=Heart_Attack_Occurrence, fill=Heart_Attack_Occurrence))+\n  geom_bar(stat = \"count\")+\n  scale_fill_manual(values=c(\"lightsteelblue\",\"thistle\" ))+\n  geom_text(\n    aes(\n      label = scales::percent(..count../sum(..count..), accuracy = 0.1)  # Calculate percentage using sum of counts\n    ),\n    stat = \"count\",\n    vjust = 1.05,  # Adjust text placement \n    size=3\n  ) +\n  theme( axis.ticks.x = element_blank(), legend.position = \"None\" )+\n  labs(x = \"Heart Attack Occurrence\")\n\np4&lt;- ggplot(data=df,aes(x=BMI_Category, fill=BMI_Category))+\n  geom_bar(stat = \"count\")+\n  scale_fill_manual(values=c(\"lightsteelblue\",\"lightcyan3\",\"thistle\",\"rosybrown2\" ))+\n  geom_text(\n    aes(\n      label = scales::percent(..count../sum(..count..), accuracy = 0.1)  # Calculate percentage using sum of counts\n    ),\n    stat = \"count\",\n    vjust = 1.25,  # Adjust text placement \n    size=3\n  ) +\n  theme( axis.ticks.x = element_blank(), legend.position = \"None\" )+\n  labs(x = \"BMI Category\", fill=\"BMI\")\n\np5&lt;- ggplot(data=df,aes(x=Cholesterol_Category, fill=Cholesterol_Category))+\n  geom_bar(stat = \"count\")+\n  scale_fill_manual(values=c(\"lightsteelblue\",\"lightcyan3\",\"thistle\"))+\n  geom_text(\n    aes(\n      label = scales::percent(..count../sum(..count..), accuracy = 0.1)  # Calculate percentage using sum of counts\n    ),\n    stat = \"count\",\n    vjust = 1.25,  # Adjust text placement \n    size=3\n  ) +\n  theme(axis.ticks.x = element_blank(), legend.position = \"None\")+\n  labs(x = \"Cholesterol Level\")\n\n(p1+p5)/(p3+p4)/p2+ plot_annotation(title= \"Overview of Japan Population Profile\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nThe study population primarily consist of Middle-aged (40-65), followed by Young adults (18-39) and Old adults (&gt;65).\nAbout 10% have experienced heart attack, indicating high prevalence of heart attack in Japan and underscores importance of addressing cardiovascular health.\nAlarmingly, only 25.2% have normal blood pressure, with 62.6% suffering from hypertension. Prolonged hypertension is a well-documented contributor to cardiovascular diseases, including heart attacks and strokes.\nNearly half of the population (49.8%) are either overweight or obese, which is known to be a significant risk factor for heart attack occurrence and correlates with other comorbidities such as diabetes and high cholesterol, exacerbating health conditions.\nSimilarly, approximately half of the population have elevated cholesterol levels.\nThe high incidence of hypertension, overweight/obesity and high cholesterol highlights a need for targeted public health campaigns to increase awareness to promote healthy lifestyles and targeted preventive measures.\n\n\n\n\n4.1 Gender, Age Group and Heart Attack Occurrence\nNext, we delve into bivariate analyses to understand correlation of heart attack with various factors. In this section, we will examine if biological factors like aging and gender are associated with heart attack. The figures below show the heart attack occurrence by Gender and Age Groups.\nMosaic plots were created using geom_mosaic() from the ggmosaic package and ggplot() from the ggplot2 package. labs(), theme() and scale_fill_manual from ggplot2 package were used to change the axis labels, theme and color of the graphs. scale_y_continuous() from ggplot2 was used to display the percentages.\n\n\nShow the code\np1&lt;-ggplot(df)+\n    geom_mosaic(aes(x = product(Heart_Attack_Occurrence, Gender), fill=Heart_Attack_Occurrence))+\n  scale_fill_manual(values=c(\"#DF9999\",\"#99AEDF\")) +\n  theme( axis.ticks.x = element_blank(), legend.position = \"bottom\" )+\n  labs(x = \"Gender\", y= \"Heart Attack\", fill=\"Heart Attack\")+ \n  scale_y_continuous(labels = scales::percent)\n\np2&lt;-ggplot(df)+\n    geom_mosaic(aes(x = product(Heart_Attack_Occurrence, Age_Groups), fill=Heart_Attack_Occurrence))+\n  scale_fill_manual(values=c(\"lightsteelblue\",\"thistle\")) +\n  theme( axis.ticks.x = element_blank(), legend.position = \"bottom\" )+\n  labs(x = \"Age Group\", y= \"Heart Attack\", fill=\"Heart Attack\")+ \n  scale_y_continuous(labels = scales::percent)\n\n(p1+p2)+ plot_annotation(title= \"Heart attack occurrence is not significantly associated with Gender and Age groups\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nBased on the stacked bar chart above, the chances of having heart attack is similar for both genders. This suggests that gender is not be a significant differentiator for heart attack occurrence in this study population.\nSurprisingly, the proportion of Young adults having heart attack is comparable to that of Middle-aged and Old adults. This finding is in disaccordance with common assumptions of heart attack occurring predominantly in older adults, signifying that heart attack may become more common in young adults in the future. Understanding causes and risk factors for heart attack in young adults is therefore pertinent, for the development of effective prevention strategies and government-initiated public health interventions.\n\n\n\n\n\n4.2 BMI and Heart Attack Occurrrence\nNext, we examine BMI distribution by age and gender, before investigating association of BMI categories with heart attack occurrence.\nThe ggplot(), geom_boxplot() and coord_flip() functions in the ggplot2 package are used to create the boxplot for BMI grouped by Age groups, colored by gender and change the orientation of the plot. The stat_halfeye() function from the ggdist package is used to show the BMI distributions for each Age group, by gender. The theme() and lab() functions in the ggplot2 package are then used to change axis labels and dictate legend position.\nThe ggbarstats() and grouped_ggbarstats() functions from ggstatsplot package are used to create the stacked bar charts with Chi-square test statistics. digits.perc, label.args, sample.size.label.args, label.args,ggplot.component` were used to specify the label size, color and axis labels.\nThe table() function is used to create contingency table before applying the chisq.test()` function from base R to compute the Chi-square results to extract the Chi-square residuals data.\n\nTotal PopulationGrouped by ageChi-squared Test\n\n\n\n\nShow the code\np1&lt;-ggplot(df, \n       aes(x = Age_Groups, \n           y = BMI,\n           fill=Gender)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.1,\n               .width = 0,\n               point_colour = NA,\n                position = position_dodge(0.1)) +\n  geom_boxplot(width = .2,\n               position = position_dodge(0.3),\n               outlier.shape = NA) +\n  labs(x = \"\",\n       y = \"BMI\") +   \n  theme(\n    legend.position = \"right\",\n    axis.title.y = element_text(hjust=1, angle=0)) +\n  coord_flip()+\n  scale_fill_manual(values=alpha(c(\"thistle\", \"lightsteelblue\"),0.35))\n\np2&lt;-ggbarstats(df, \n           y = Heart_Attack_Occurrence, \n           x = BMI_Category,\n           digits.perc = 1,\n           label.args = list(size = 2.5, fill = \"white\"),\n  sample.size.label.args = list(size = 2.5),\n  legend.title = \"BMI\",\n  xlab=\"Heart Attack\",\n  ggplot.component = list(theme( axis.ticks.x=element_blank()), scale_fill_manual(values=c(\"rosybrown2\",\"thistle\",\"lightsteelblue\",\"lightcyan3\"))\n           ))\n\np1/p2\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np&lt;-grouped_ggbarstats(df, \n           y = Heart_Attack_Occurrence, \n           x = BMI_Category,\n           digits.perc = 1, \n           grouping.var = Age_Groups, \n           plotgrid.args = list(ncol = 2),\n           sample.size.label.args = list(size = 2.5),\n           label.args = list(size = 2.5, fill = \"white\"), \n           ggplot.component = list(theme(plot.subtitle = element_text(size = 8), axis.ticks.x=element_blank()), scale_fill_manual(values=c(\"rosybrown2\",\"thistle\",\"lightsteelblue\",\"lightcyan3\"))),\n           legend.title = \"BMI\",\n            xlab=\"Heart Attack\")\n\n\n\n\n\nChi-square test residual table for whole population\n\n#Create contingency table\ncontingency_table &lt;- table(df$BMI_Category, df$Heart_Attack_Occurrence)\n\n# Perform chi-square test\nchi_square_test &lt;- chisq.test(contingency_table)\n\n# View the results\npearson_residuals &lt;- chi_square_test$residuals\nprint(pearson_residuals)\n\n             \n                      No        Yes\n  Underweight  0.4921282 -1.4863132\n  Normal      -0.5867653  1.7721340\n  Overweight  -0.1104517  0.3335834\n  Obese        0.7163291 -2.1634392\n\n\nChi-square test residual table for Young Adults\n\n#Create contingency table\nsubset_df&lt;-df[df$Age_Groups=='Young',]\ncontingency_table &lt;- table(subset_df$BMI_Category, subset_df$Heart_Attack_Occurrence)\n\n# Perform chi-square test\nchi_square_test &lt;- chisq.test(contingency_table)\n\n# View the results\npearson_residuals &lt;- chi_square_test$residuals\nprint(pearson_residuals)\n\n             \n                      No        Yes\n  Underweight  0.2641421 -0.8146029\n  Normal      -0.4873117  1.5028483\n  Overweight  -0.1114740  0.3437812\n  Obese        0.7150849 -2.2052912\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nDistribution of BMI is consistent across age group and gender, resembing a normal distribution. This indicates that BMI is not associated with gender or age in the population.\nBMI category is associated with heart attack occurrence (Chi-square p-value&lt;0.05). Interestingly, there were significantly less obese individuals experiencing heart attack than expected, based on the large negative Chi-square residual value (-2.16). However, when stratified by age groups, this association remained significant for young adults only. This suggests that the association may be age-specific and that the effect of BMI on heart attack occurrence might be more pronounced in younger individuals, who may not have developed other comorbidities yet (e.g., hypertension, high cholesterol).\n\n\n\n\n\n4.3 Association of Heart Attack with Hypertension and Cholesterol\nGiven the high incidence of hypertension observed in the earlier section, we will investigate whether hypertension is associated with an increased risk of heart attack.\nMosaic plots were created using geom_mosaic() from the ggmosaic package and ggplot() from the ggplot2 package. labs(), theme() and scale_fill_manual from ggplot2 package were used to change the axis labels, theme and color of the graphs. facet_wrap() was used to facet the mosaic plots by Age Group. scale_y_continuous() from ggplot2 was used to display the percentages.\n\n\nShow the code\np1&lt;-ggplot(data=df) +\n  geom_mosaic(aes(x = product(Blood_Pressure,Heart_Attack_Occurrence), fill=Blood_Pressure))+\n  theme(legend.position=\"right\") +\n  labs(y = \"Blood Pressure\",\n       x = \"Heart Attack\")+\nscale_fill_manual(\"Heart Attack\",values=c( \"lightsteelblue\",\"lightcyan3\", \"thistle\",\"rosybrown2\"))+\n  scale_y_continuous(labels = scales::percent)+\n  facet_wrap(~Age_Groups)\n\np2&lt;-ggplot(data=df) +\n  geom_mosaic(aes(x = product(Cholesterol_Category,Heart_Attack_Occurrence), fill=Cholesterol_Category))+\n  theme(legend.position=\"right\") +\n  labs(y = \"Cholesterol Level\",\n       x = \"Heart Attack Occurrence\")+\nscale_fill_manual(\"Heart Attack\",values=c( \"lightsteelblue\",\"lightcyan3\", \"thistle\"))+\n  facet_wrap(~Age_Groups) + \n  scale_y_continuous(labels = scales::percent)\n\np1/p2 + plot_layout(axis_titles = \"collect\")+ plot_annotation(title= \"Heart Attack is not significantly associated with Hypertension and Cholesterol Level\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nHeart attack occurrence does not significantly increase in groups with hypertension or elevated blood pressure, compared to normal blood pressure, across all age groups.\nSimilarly, individuals with elevated cholesterol levels do not have increased risk of heart attack occurrence regardless of age groups.\nThe findings suggests that high blood pressure or cholesterol levels alone may only have a small impact on heart attack risk or that medication adherence and lifestyle modifications could play a role in mitigating the associated risks. The overall heart attack risk for an individual may only become more pronounced when multiple factors are accounted for, as presence of multiple risk factors simultaneously compounds the overall risks since each condition can exacerbate the others.\n\n\n\n\n\n4.4 Association of Heart Attack with Medical History\nHeart attack is typically caused by a combination of various interrelated risk factors. Therefore, it is essential to examine other factors such as underlying medical conditions, family history, and lifestyle choices. These factors may interact in complex ways, increasing the likelihood of heart attacks.\nIn this section, we will investigate if Diabetes History and Family History increases tendency of heart attack occurrence.\n\nFamily history & Diabetes Mosaic PlotDiabetes by Age GroupChi-square test\n\n\n\n\nShow the code\np1&lt;-ggplot(data=df) +\n  geom_mosaic(aes(x = product(Heart_Attack_Occurrence,Diabetes_History), fill=Heart_Attack_Occurrence))+\n  theme(legend.position=\"right\") +\n  labs(x = \"Diabetes History\",\n       y = \"Heart Attack Occurrence\")+\nscale_fill_manual(\"Heart Attack\",values=c( \"lightsteelblue\", \"thistle\"))+\n  scale_y_continuous(labels = scales::percent)\n\np2&lt;-ggplot(data=df) +\n  geom_mosaic(aes(x = product(Heart_Attack_Occurrence,Family_History), fill=Heart_Attack_Occurrence))+\n  theme(legend.position=\"right\") +\n  labs(x = \"Family History\",\n       y = \"Heart Attack Occurrence\")+\nscale_fill_manual(\"Heart Attack\",values=c( \"lightsteelblue\", \"thistle\"))+\n  facet_wrap(~Age_Groups) + \n  scale_y_continuous(labels = scales::percent)\np2/p1\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ngrouped_ggbarstats(df, \n           y = Heart_Attack_Occurrence, \n           x = Diabetes_History,\n           digits.perc = 1, \n           grouping.var = Age_Groups, \n           plotgrid.args = list(ncol = 2),\n           sample.size.label.args = list(size = 2.5),\n           label.args = list(size = 2.5, fill = \"white\"), \n           legend.title = \"Diabetes History\",\n           xlab=\"Heart Attack\",\n           ggplot.component = list(theme(plot.subtitle = element_text(size = 8), axis.ticks.x=element_blank()),scale_fill_manual(values = c(\"thistle\",\"lightsteelblue\"))))\n\n\n\n\n\n\n\n\n\n\n\n\nChi-square test residual table for Young Adults\n\n#Create contingency table\nsubset_df&lt;-df[df$Age_Groups=='Young',]\ncontingency_table &lt;- table(subset_df$Diabetes_History, subset_df$Heart_Attack_Occurrence)\n\n# Perform chi-square test\nchi_square_test &lt;- chisq.test(contingency_table)\n\n# View the results\npearson_residuals &lt;- chi_square_test$residuals\nprint(pearson_residuals)\n\n     \n              No        Yes\n  No   0.3881721 -1.1971061\n  Yes -0.7609653  2.3467842\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nProportion of individuals with heart attack did not differ significantly between groups with or without family history, across the age groups.\nInterestingly, proportion of individuals who have experienced heart attack was similar for individuals with or without diabetes history for the overall population but heart attack occurrence is associated with diabetes history in Young Adults (Chi-square p-value&lt;0.05) when the data is age-stratified. There is increased tendency of young adults with diabetes history experiencing heart attack compared to young adults without diabetes history, based on the large positive Chi-square residual value of 2.34.\n\n\n\n\n\n4.5 Lifestyle Factors and Heart Attack Occurrence\nIn this section, we will investigate if lifestyle factors like physical activity, diet quality and alcohol consumption are associated with heart attack.\nThe gglikert() function from ggstats package is used to create the diverging bar charts. scale_fill_brewer(), theme() and labs() from *ggplot2` package is used to set the color palette, change axis labels and ticks.\n\n\nShow the code\n# Create the subset data for \"Yes\" and \"No\" heart attack occurrences\nHA_y &lt;- df %&gt;% filter(Heart_Attack_Occurrence == \"Yes\") %&gt;% select(Physical_Activity, Diet_Quality, Alcohol_Consumption)\nHA_n &lt;- df %&gt;% filter(Heart_Attack_Occurrence == \"No\") %&gt;% select(Physical_Activity, Diet_Quality, Alcohol_Consumption)\n\n# Find the maximum length of the two subsets\nmax_len &lt;- max(nrow(HA_y), nrow(HA_n))\n\n# Pad the shorter dataframe with NAs\nHA_y &lt;- bind_rows(HA_y, data.frame(Physical_Activity = rep(NA, max_len - nrow(HA_y)), Diet_Quality = rep(NA, max_len - nrow(HA_y)),Alcohol_Consumption = rep(NA, max_len - nrow(HA_y))))\n\nPA&lt;-data.frame(Yes=HA_y$Physical_Activity, No=HA_n$Physical_Activity)\n\nDQ&lt;-data.frame(Yes=HA_y$Diet_Quality, No=HA_n$Diet_Quality)\n\nAC&lt;-data.frame(Yes=HA_y$Alcohol_Consumption, No=HA_n$Alcohol_Consumption)\n\np1&lt;-gglikert(PA) + \n  scale_fill_brewer(palette=\"Blues\") +\n  labs(x=\"Physical Activity\", y=\"Heart Attack\")+\n  theme(axis.ticks.x = element_blank(), \n        axis.ticks.y = element_blank(),\n        axis.text.x=element_blank())\n\np2&lt;-gglikert(DQ) + \n  scale_fill_brewer(palette=\"Set1\") +\n  labs(x=\"Diet Quality\", y=\"Heart Attack\")+\n  theme(axis.ticks.x = element_blank(), \n        axis.ticks.y = element_blank(),\n        axis.text.x=element_blank())\n\n\np3&lt;-gglikert(AC) + \n  scale_fill_brewer(palette=\"Blues\") +\n  labs(x=\"Alcohol Consumption\", y=\"Heart Attack\")+\n  theme(axis.ticks.x = element_blank(), \n        axis.ticks.y = element_blank(),\n        axis.text.x=element_blank())\n\n(p1+p2)/p3+ plot_annotation(title=\"Heart attack is not associated with Physical Activity, Diet Quality\\n&Alcohol consumption\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nHeart attack occurrence does not vary significantly with Physical Activity, Diet Quality and Alcohol Consumption. This suggests that lifestyle factors may a secondary or insignificant role in heart attack risk for the study population. However, the data for these variables are measured on a likert scale which may be prone to biases, leading to potential inaccuracies and weaken the observed relationship between lifestyle factors and heart attack occurrence.\n\n\n\n\n\n\n5 Conclusion\nOur analyses reveals a high prevalence of heart attack occurrence in the Japanese population, with approximately 10% affected, raising a cause for concern and emphasizes a pressing need for targeted cardiovascular health initiatives. Furthermore, significant portions of the population suffers from hypertension, elevated cholesterol levels, and/or are overweight or obese, all of which are well-known risk factors for heart disease.\nMore importantly, heart attack incidence is comparable between young adults (18-39) and adults aged 40 and above, highlighting an emerging concern for cardiovascular health in younger populations. In our analyses, BMI category was found to be associated with heart attack occurrence, particularly in young adults, suggesting age-specific effects. Diabetes history was additionally associated with heart attack in young adults.\nOn the other hand, hypertension, elevated cholesterol levels, family history, physical activity, diet quality, and alcohol consumption did not show a significant relationship with heart attack occurrence in this population.\nThese findings underscore the need for more comprehensive studies to identify heart attack risk factors among younger adults. Future research and analyses could focus on exploring the complex interactions between risk factors to provide a clearer understanding of the risk profiles for heart attack in different demographic groups.\n\n\n6 References\n\nHeart Attack Research\nBlood Pressure Categories\nBMI Categories\nCholesterol Level Categories\nChi-square test"
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex04c.html",
    "href": "Hands_on_Exercise/Hands-on_Ex04c.html",
    "title": "Hands-on Exercise 04c: Visualising Uncertainty",
    "section": "",
    "text": "1 Overview\nVisualising uncertainty is relatively new in statistical graphics. In this chapter, we will create statistical graphics for visualising uncertainty, through:\n\nplotting statistics error bars by using ggplot2,\nplotting interactive error bars by combining ggplot2, plotly and DT,\ncreating advanced by using ggdist, and\ncreating hypothetical outcome plots (HOPs) by using ungeviz package.\n\n\n\n2 Getting Started\nFor the purpose of this exercise, the following R packages will be used:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\nLoading packagesImport dataset\n\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\n3 Visualizing the uncertainty of point estimates: ggplot2 methods\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\nIn this section, we will plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n3.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\n\nShow the code\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\n\n3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\nIn the code chunk below,\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label.\n\n\n\nShow the code\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\n\n3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, we will plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\n\nShow the code\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4 Visualising Uncertainty: ggdist package\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\n4.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nShow the code\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\nWe can adjust the width and intervals using the .width and ’.interval` arguments.\n\n\nShow the code\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n  .width = c(0.95,0.99), \n  .point = median,\n  .interval = qi,) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n4.2 Using stat_gradientinterval() of ggdist\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nShow the code\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n4.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\nHypothetical outcome plots consist of multiple individual plots (frames), each of which depicts one draw from a distribution.\n\ndevtools::install_github(\"wilkelab/ungeviz\")\nlibrary(ungeviz)\n\n\n\nShow the code\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 4c"
    ]
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex04d.html",
    "href": "Hands_on_Exercise/Hands-on_Ex04d.html",
    "title": "Hands-on Exercise 04d: Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "1 Overview\nFunnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages.\n\n\n\n2 Getting Started\nIn this exercise, the following R packages will be used:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\nIn addition, the COVID-19_DKI_Jakarta dataset downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\n\nLoading PackagesImporting dataset\n\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\n\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\n\n\n3 FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n3.1 FunnelPlotR methods\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nNote: group in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\n\n\n3.2 FunnelPlotR methods: Makeover 1\nIn the code chunk below,\n\ndata_type argument is used to change from default “SR” (standardised ratios) to “PR” (proportions)\nxrange and yrange are used to set the range of x-axis and y-axis\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",    \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05)   \n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n3.3 FunnelPlotR methods: Makeover 2\nIn the code chunk below,\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n4 Funnel Plot for Fair Visual Comparison: ggplot2 methods\nIn this section, we will build funnel plots step-by-step by using ggplot2, to enhance working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n4.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n4.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n4.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\n\nShow the code\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\n4.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly\n\n\n\n\n\n\n\n\n5 References\n\nfunnelPlotR package\nFunnel Plots for Indirectly-standardised ratios\nChanging funnel plot options\nggplot2 package",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 4d"
    ]
  },
  {
    "objectID": "In-Class_Exercise/In-Class_Ex04.html",
    "href": "In-Class_Exercise/In-Class_Ex04.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "Getting Started\n\nLoad PackagesImport Data\n\n\n\npacman::p_load(tidyverse)\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\nCreating boxplot of English score by Class\n\nggplot(data=exam_data, \n       aes(x = ENGLISH, \n           y = CLASS, fill=CLASS))+\n  geom_boxplot()+\n  scale_fill_brewer(\"Class\", palette=\"Set2\")+\n  labs(x='English Score',\n       y='Class',\n       title='English Score by Class')"
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex05a.html",
    "href": "Hands_on_Exercise/Hands-on_Ex05a.html",
    "title": "Hands-on Exercise 05a: Creating Ternary Plot with R",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 5a"
    ]
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex05a.html#loading-packages",
    "href": "Hands_on_Exercise/Hands-on_Ex05a.html#loading-packages",
    "title": "Hands-on Exercise 05a: Creating Ternary Plot with R",
    "section": "Loading Packages",
    "text": "Loading Packages\n\npacman::p_load(plotly, ggtern, tidyverse)",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 5a"
    ]
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex05a.html#importing-data",
    "href": "Hands_on_Exercise/Hands-on_Ex05a.html#importing-data",
    "title": "Hands-on Exercise 05a: Creating Ternary Plot with R",
    "section": "Importing Data",
    "text": "Importing Data\n\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")\n\n:::\n\n3 Data Preparation\nWe use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)\n\n\n\n4 Plotting Ternary Diagram with R\n\n4.1 Plotting a static ternary diagram\nWe use ggtern() function of ggtern package to create a simple ternary plot.\n\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n\n\n4.2 Plotting an interative ternary diagram\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\n\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 5a"
    ]
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex05b.html",
    "href": "Hands_on_Exercise/Hands-on_Ex05b.html",
    "title": "Hands-on Exercise 05b: Visual Correlation Analysis",
    "section": "",
    "text": "1 Overview\nCorrelation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nIn this hands-on exercise, we will:\n\ncreate correlation matrix using pairs() of R Graphics.\nplot corrgram using corrplot package of R.\ncreate an interactive correlation matrix using plotly R.\n\n\n\n2 Getting Started\nIn this exercise, we will be using the Wine Quality Data Set of UCI Machine Learning Repository and the following packages: corrplot, ggstatplot and tidyverse.\n\nLoading PackagesImporting Data\n\n\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n\n\n\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\n\n\n\n\n\n3 Building Correlation Matrix: pairs() method\n\n3.1 Building a basic correlation matrix\nThe figure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\n\npairs(wine[,2:12])\n\n\n\n\n\n\n\n\n\n\n3.2 Drawing the lower corner\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\nThe code chunk below displays the upper half of the correlation matrix.\n\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\n\n\n\n\n3.3 Including with correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n\n\n\n\n\n\n\n\n\n\n\n4 Visualising Correlation Matrix: ggcormat()\nIn this section, we will visualise correlation matrix by using ggcorrmat() of ggstatsplot package.\n\n4.1 The basic plot\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\n\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n\n\n\n\n5 Building multiple plots\ngrouped_ggcorrmat() of ggstatsplot combines list of individual plots into a single plot.\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\n\n\n\n\nto build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package.\n\n\n\n6 Visualising Correlation Matrix using corrplot Package\n\n6.1 Getting started with corrplot\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\n\nThe default visual object used to plot the corrgram is circle.\nThe default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red.\nBlue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients.\nThe intensity of the colour or also known as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.\n\n\n\n6.2 Working with visual geometrics\nn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\n\n\n\n\n\n6.3 Working with layout\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\n6.4 Working with mixed layout\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe arguments lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n\n6.5 Combining corrgram with the significant test\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n\n\n\n6.6 Reorder a corrgram\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\n6.7 Reordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)\n\n\n\n\n\n\n\n\n\n\n\n7 References\nVisual Correlation Analysis",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 5b"
    ]
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex05c.html",
    "href": "Hands_on_Exercise/Hands-on_Ex05c.html",
    "title": "Hands-on Exercise 05c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this exercise, we will use R to plot static and interactive heatmap for visualising and analysing multivariate data.",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 5c"
    ]
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex05c.html#loading-packages",
    "href": "Hands_on_Exercise/Hands-on_Ex05c.html#loading-packages",
    "title": "Hands-on Exercise 05c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Loading Packages",
    "text": "Loading Packages\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\npackage 'iterators' successfully unpacked and MD5 sums checked\npackage 'permute' successfully unpacked and MD5 sums checked\npackage 'ca' successfully unpacked and MD5 sums checked\npackage 'foreach' successfully unpacked and MD5 sums checked\npackage 'gclus' successfully unpacked and MD5 sums checked\npackage 'qap' successfully unpacked and MD5 sums checked\npackage 'registry' successfully unpacked and MD5 sums checked\npackage 'TSP' successfully unpacked and MD5 sums checked\npackage 'vegan' successfully unpacked and MD5 sums checked\npackage 'seriation' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\User\\AppData\\Local\\Temp\\RtmpIvly2F\\downloaded_packages\n\n\npackage 'viridis' successfully unpacked and MD5 sums checked\npackage 'dendextend' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\User\\AppData\\Local\\Temp\\RtmpIvly2F\\downloaded_packages\n\n\npackage 'webshot' successfully unpacked and MD5 sums checked\npackage 'assertthat' successfully unpacked and MD5 sums checked\npackage 'egg' successfully unpacked and MD5 sums checked\npackage 'heatmaply' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\User\\AppData\\Local\\Temp\\RtmpIvly2F\\downloaded_packages",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 5c"
    ]
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex05c.html#importing-dataset",
    "href": "Hands_on_Exercise/Hands-on_Ex05c.html#importing-dataset",
    "title": "Hands-on Exercise 05c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Importing Dataset",
    "text": "Importing Dataset\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 5c"
    ]
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex05d.html",
    "href": "Hands_on_Exercise/Hands-on_Ex05d.html",
    "title": "Hands-on Exercise 05d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "1 Overview\nParallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them.\nIn this exercise, we will:\n\nplot statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplot interactive parallel coordinates plots by using parcoords package, and\nplot interactive parallel coordinates plots by using parallelPlot package.\n\n\n\n2 Getting Started\nIn this exercise, we will use the World Happinees 2018 data and the following packages: GGally, parcoords, parallelPlot and tidyverse.\n\nLoading PackagesImporting Dataset\n\n\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\n\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\n\n\n\n\n3 Plotting Static Parallel Coordinates Plot\nIn this section, we will plot static parallel coordinates plot by using ggparcoord() of GGally package.\n\n3.1 Plotting a simple parallel coordinates\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\nNotice that only two arguments, namely data and columns are used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.\n\n\n3.2 Plotting a parallel coordinates with boxplot\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n\n\n3.3 Parallel coordinates with facet\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\n\n\n3.4 Rotating x-axis text label\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree.\n\n\n3.5 Adjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))\n\n\n\n\n\n\n\n\n\n\n\n4 Plotting Interactive Parallel Coordinates Plot: parallelPlot methods\nparallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js. In this section, we will use functions provided in parallelPlot package to build interactive parallel coordinates plot.\n\n4.1 The basic plot\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\n\n\n4.2 Rotate axis label\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n4.3 Changing the colour scheme\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunk below.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n4.4 Parallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)\n\n\n\n\n\n\n\n\n5 References\nggparcoord() of GGally package\nparcoords user guide\nparallelPlot",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 5d"
    ]
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex05e.html",
    "href": "Hands_on_Exercise/Hands-on_Ex05e.html",
    "title": "Hands-on Exercise 05e: Treemap Visualisation with R",
    "section": "",
    "text": "1 Overview\nIn this hands-on exercise, we will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package. Then, we will learn how to plot static treemap by using treemap package. In the third section, we will learn how to design interactive treemap by using d3treeR package.\n\n\n2 Getting Started\nIn this exercise, we will use REALIS2018.csv data and the following packages: treemap, treemapify and tidyverse\n\nLoading PackagesImporting Data\n\n\n\npacman::p_load(treemap, treemapify, tidyverse) \n\n\n\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n\n\n\n\n\n3 Data Wrangling and Manipulation\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nThe code chank below shows a typical two lines code approach to perform the steps.\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n4 Designing Treemap with treemap Package\ntreemap package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: treemap() offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\n4.1 Designing a static treemap\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\n4.2 Using the basic arguments\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nindex: - The index vector must consist of at least two column names or else no hierarchy treemap will be plotted. If multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\nvSize - The column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\n4.3 Working with vColor and type arguments\nIn the code chunk below, type argument is define as value.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nNote: - The rectangles are coloured with different intensity of green, reflecting their respective median unit prices. - The legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\n\n\n4.4 Colours in treemap package\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\n\n4.5 The “value” type treemap\nThe code chunk below shows a value type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nNote: - although the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive. - The reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n4.6 The “manual” type treemap\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nNote: - The colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\nTo overcome this problem, a single colour palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n4.7 Treemap Layout\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\n\n4.8 Working with algorithm argument\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n4.9 Using sortID\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n5 Designing Treemap using treemapify Package\ntreemapify is a R package specially developed to draw treemaps in ggplot2. In this section, we will design treemps closely resemble treemaps designing in previous section by using treemapify.\n\n5.1 Designing a basic treemap\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\n\n\n\n5.2 Defining hierarchy\nGroup by Planning Region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\nGroup by Planning Area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\nAdding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")\n\n\n\n\n\n\n\n\n\n\n\n6 Designing Interactive Treemap using d3treeR\n\n6.1 Installing d3treeR package\n\nlibrary(d3treeR)\n\n\n\n6.2 Designing An Interactive Treemap\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nd3tree(tm,rootname = \"Singapore\" )\n\n\n\n\n\n\n\n\n7 References\nTreemap Visualisation with R",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 5e"
    ]
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex05e.html#loading-packages",
    "href": "Hands_on_Exercise/Hands-on_Ex05e.html#loading-packages",
    "title": "Hands-on Exercise 05e: Treemap Visualisation with R",
    "section": "Loading Packages",
    "text": "Loading Packages\n\npacman::p_load(treemap, treemapify, tidyverse) \n\npackage 'gridBase' successfully unpacked and MD5 sums checked\npackage 'igraph' successfully unpacked and MD5 sums checked\npackage 'treemap' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\User\\AppData\\Local\\Temp\\RtmpYvjz2F\\downloaded_packages\n\n\npackage 'markdown' successfully unpacked and MD5 sums checked\npackage 'png' successfully unpacked and MD5 sums checked\npackage 'jpeg' successfully unpacked and MD5 sums checked\npackage 'shades' successfully unpacked and MD5 sums checked\npackage 'gridtext' successfully unpacked and MD5 sums checked\npackage 'ggfittext' successfully unpacked and MD5 sums checked\npackage 'treemapify' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\User\\AppData\\Local\\Temp\\RtmpYvjz2F\\downloaded_packages",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 5e"
    ]
  },
  {
    "objectID": "Hands_on_Exercise/Hands-on_Ex05e.html#importing-data",
    "href": "Hands_on_Exercise/Hands-on_Ex05e.html#importing-data",
    "title": "Hands-on Exercise 05e: Treemap Visualisation with R",
    "section": "Importing Data",
    "text": "Importing Data\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n:::\n\n3 Data Wrangling and Manipulation\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nThe code chank below shows a typical two lines code approach to perform the steps.\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n4 Designing Treemap with treemap Package\ntreemap package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: treemap() offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\n4.1 Designing a static treemap\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\n4.2 Using the basic arguments\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nindex: - The index vector must consist of at least two column names or else no hierarchy treemap will be plotted. If multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\nvSize - The column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\n4.3 Working with vColor and type arguments\nIn the code chunk below, type argument is define as value.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nNote: - The rectangles are coloured with different intensity of green, reflecting their respective median unit prices. - The legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\n\n\n4.4 Colours in treemap package\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\n\n4.5 The “value” type treemap\nThe code chunk below shows a value type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nNote: - although the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive. - The reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n4.6 The “manual” type treemap\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nNote: - The colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\nTo overcome this problem, a single colour palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n4.7 Treemap Layout\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\n\n4.8 Working with algorithm argument\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n4.9 Using sortID\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n5 Designing Treemap using treemapify Package\ntreemapify is a R package specially developed to draw treemaps in ggplot2. In this section, we will design treemps closely resemble treemaps designing in previous section by using treemapify.\n\n5.1 Designing a basic treemap\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\n\n\n\n5.2 Defining hierarchy\nGroup by Planning Region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\nGroup by Planning Area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\nAdding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")\n\n\n\n\n\n\n\n\n\n\n\n6 Designing Interactive Treemap using d3treeR\n\n6.1 Installing d3treeR package\n\ninstall.packages(\"devtools\")\n\npackage 'devtools' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\User\\AppData\\Local\\Temp\\RtmpYvjz2F\\downloaded_packages\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n\nRcpp      (1.0.13-1 -&gt; 1.0.14   ) [CRAN]\nbslib     (0.8.0    -&gt; 0.9.0    ) [CRAN]\nrlang     (1.1.4    -&gt; 1.1.5    ) [CRAN]\nXML       (NA       -&gt; 3.99-0.18) [CRAN]\ngridSVG   (NA       -&gt; 1.7-5    ) [CRAN]\ndata.tree (NA       -&gt; 1.1.0    ) [CRAN]\n\n\npackage 'Rcpp' successfully unpacked and MD5 sums checked\n\n\npackage 'bslib' successfully unpacked and MD5 sums checked\npackage 'rlang' successfully unpacked and MD5 sums checked\n\n\npackage 'XML' successfully unpacked and MD5 sums checked\npackage 'gridSVG' successfully unpacked and MD5 sums checked\npackage 'data.tree' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\User\\AppData\\Local\\Temp\\RtmpYvjz2F\\downloaded_packages\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\User\\AppData\\Local\\Temp\\RtmpYvjz2F\\remotes11245da6114\\d3treeR-d3treeR-ebb833d/DESCRIPTION' ... OK\n* preparing 'd3treeR':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\nOmitted 'LazyData' from DESCRIPTION\n* building 'd3treeR_0.1.tar.gz'\n\n\nlibrary(d3treeR)\n\n\n\n6.2 Designing An Interactive Treemap\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nd3tree(tm,rootname = \"Singapore\" )\n\n\n\n\n\n\n\n\n7 References\nTreemap Visualisation with R",
    "crumbs": [
      "Hands-on Exercises",
      "Hands-on Exercise 5e"
    ]
  }
]