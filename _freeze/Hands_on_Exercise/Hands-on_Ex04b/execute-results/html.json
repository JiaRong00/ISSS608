{
  "hash": "4e1ad89a9f3e0bc53974b343e57b2373",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 04b: Visual Statistical Analysis\"\nformat:\n  html:\n    fontcolor: '#3b3b3b'\n    code-line-numbers: true\nauthor: \"Moo Jia Rong\"\ndate: \"February 1, 2025\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true \n---\n\n\n\n### **1 Overview**\n\nIn this exercise, we will gain hands-on experience on using:\n\n-   ggstatsplot package to create visual graphics with rich statistical information,\n-   performance package to visualise model diagnostics, and\n-   parameters package to visualise model parameters\n\n### **2 Getting Started**\n\n::: panel-tabset\n\n## Loading Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggstatsplot, tidyverse)\n```\n:::\n\n\n\n## Import dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\nexam\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n### **3 Statistical Tests**\n\n#### **3.1 One-sample test: gghistostats() method**\n\n`ghistostats()` can be used to build an visual of one-sample test on English scores.\n\nIn addition, we can use `grouped_gghistostats()` to separate the tests by group.\n\n::: panel-tabset\n\n## non-grouped\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n## grouped\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nset.seed(1234)\n\ngrouped_gghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\",\n  grouping.var      = GENDER\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n#### **3.2 Bayes Factor**\n\n-   A Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\n\n-   That’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\n\n-   When we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10.\n\n#### **3.3 Two-sample mean test: ggbetweenstats()**\n\nIn the code chunk below, `ggbetweenstats()` is used to build a visual for two-sample mean test of Maths scores by gender.\n\nWe can change the colors by specifying `package` (package from which color palette is to be taken) and `palette`.\n\n::: panel-tabset\n\n## Default\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n## Changing color palette\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE,\n  package = \"ggsci\",\n  palette = \"nrc_npg\"\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\nApart from being able to change the color palattes,\n\n-   The `type` (of test) argument also accepts the following abbreviations: \"p\" (for parametric), \"np\" (for nonparametric), \"r\" (for robust), \"bf\" (for Bayes Factor).\n\n-   The type of plot to be displayed can also be modified (\"box\", \"violin\", or \"boxviolin\"). The default is boxviolin\n\n::: panel-tabset\n\n## Box\n`violin.args` can be modified to remove the violin\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE,\n  # to remove violin plot\n  violin.args = list(width = 0)\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## Violin\n`boxplot.args` can be modified to remove the boxplot\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE,\n  # to remove box plot\n  boxplot.args = list(width = 0)\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n#### **3.4 Oneway ANOVA Test: ggbetweenstats() method**\n\nIn the code chunk below, `ggbetweenstats()` is used to build a visual for One-way ANOVA test on English score by race.\n\n-   `pairwise.display` has three options, 'ns': shows only non-signififcant, 's': shows only significant, 'all': displays all pairwise comparisons\n-    `p.adjust.method` determines the method for adjusting p-values for multiple tests \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n#### **3.5 Significant Test of Correlation: ggscatterstats()**\n\nIn the code chunk below, `ggscatterstats()` is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n#### **3.6 Significant Test of Association (Depedence) : ggbarstats() methods**\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using `cut()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam1 <- exam %>% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n```\n:::\n\n\n\nIn this code chunk below `ggbarstats()` is used to build a visual for Significant Test of Association\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER\n           )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nTo change the display of percentages to include decimal points, we can modify the `digits.perc` argument\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER,\n           digits.perc = 1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n### **4 Visualising Models**\n\nIn this section, we will visualise model diagnostic and model parameters by using parameters package.\n\nThe Toyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.\n\n#### **4.1 Getting Started**\n\n::: panel-tabset \n\n## Loading packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(readxl, performance, parameters, see)\n```\n:::\n\n\n\n## Importing dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   <dbl> <chr>    <dbl>     <dbl>     <dbl>    <dbl>  <dbl>         <dbl>  <dbl>\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period <dbl>, HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n:::\n\n#### **4.2 Multiple Regression Model using lm()**\n\nThe code chunk below is used to calibrate a multiple linear regression model by using `lm()` of Base Stats of R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n```\n\n\n:::\n:::\n\n\n\n#### **4.3 Model Diagnostic: checking for multicolinearity:**\n\nIn the code chunk below, `check_collinearity()` of performance package is used to check for multicolinearity of variables included in the regression model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_collinearity(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_c <- check_collinearity(model)\nplot(check_c)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n#### **4.4 Model Diagnostic: checking normality assumption**\n\nIn the code chunk below, `check_normality()` of performance package is used to check for normality of the variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\ncheck_n <- check_normality(model1)\n\nplot(check_n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n#### **4.5 Model Diagnostic: Check model for homogeneity of variances**\n\nIn the code chunk below, `check_heteroscedasticity()` of performance package is used to check for homogeneity of variances.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_h <- check_heteroscedasticity(model1)\n\nplot(check_h)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n#### **4.6 Model Diagnostic: Complete check**\n\nAlternatively, We can also perform all the checks at once by using `check_model()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(model1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\n#### **4.7 Visualising Regression Parameters: see methods**\n\nIn the code below, `plot()` of see package and `parameters()` of parameters package is used to visualise the parameters of a regression model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(parameters(model1))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n#### **4.8 Visualising Regression Parameters: ggcoefstats() methods**\n\nIn the code below, `ggcoefstats()` of ggstatsplot package to visualise the parameters of a regression model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggcoefstats(model1, \n            output = \"plot\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04b_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex04b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}