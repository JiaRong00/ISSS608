---
title: "Hands-on Exercise 05b: Visual Correlation Analysis"
format:
  html:
    fontcolor: '#3b3b3b'
    code-line-numbers: true
author: "Moo Jia Rong"
date: "February 10, 2025"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true 
---

### **1 Overview**

Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.

When multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.

In this hands-on exercise, we will:

-   create correlation matrix using pairs() of R Graphics.
-   plot corrgram using corrplot package of R.
-   create an interactive correlation matrix using plotly R.

### **2 Getting Started**

In this exercise, we will be using the Wine Quality Data Set of UCI Machine Learning Repository and the following packages: corrplot, ggstatplot and tidyverse.

::: panel-tabset
## Loading Packages

```{r}
pacman::p_load(corrplot, ggstatsplot, tidyverse)
```

## Importing Data

```{r}
wine <- read_csv("data/wine_quality.csv")
```
:::

### **3 Building Correlation Matrix: pairs() method**

#### **3.1 Building a basic correlation matrix**

The figure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.

```{r}
pairs(wine[,1:11])
```

```{r}
pairs(wine[,2:12])
```

#### **3.2 Drawing the lower corner**

pairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.

To show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.

```{r}
pairs(wine[,2:12], upper.panel = NULL)
```

The code chunk below displays the upper half of the correlation matrix.

```{r}
pairs(wine[,2:12], lower.panel = NULL)
```

#### **3.3 Including with correlation coefficients**

To show the correlation coefficient of each pair of variables instead of a scatter plot, `panel.cor` function will be used. This will also show higher correlations in a larger font.

```{r}
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}

pairs(wine[,2:12], 
      upper.panel = panel.cor)
```

### **4 Visualising Correlation Matrix: ggcormat()**

In this section, we will visualise correlation matrix by using `ggcorrmat()` of ggstatsplot package.

#### **4.1 The basic plot**

```{r}
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11)
```

```{r}
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are no significant at p < 0.05"
)
```

-   `cor.vars` argument is used to compute the correlation matrix needed to build the corrgram.
-   `ggcorrplot.args` argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.

The sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.

```{r}
ggplot.component = list(
    theme(text=element_text(size=5),
      axis.text.x = element_text(size = 8),
      axis.text.y = element_text(size = 8)))
```

### **5 Building multiple plots**

`grouped_ggcorrmat()` of ggstatsplot combines list of individual plots into a single plot.

```{r}
#| fig-width: 14
#| fig-height: 7
grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type,
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  )
)
```

-   to build a facet plot, the only argument needed is `grouping.var`.
-   Behind `group_ggcorrmat()`, patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.
-   Likewise, annotation.args argument is calling plot annotation arguments of patchwork package.

### **6 Visualising Correlation Matrix using corrplot Package**

#### **6.1 Getting started with corrplot**

Before we can plot a corrgram using `corrplot()`, we need to compute the correlation matrix of wine data frame.

In the code chunk below, `cor()` of R Stats is used to compute the correlation matrix of wine data frame.

```{r}
wine.cor <- cor(wine[, 1:11])
```

Next, `corrplot()` is used to plot the corrgram by using all the default setting as shown in the code chunk below.

```{r}
corrplot(wine.cor)
```

-   The default visual object used to plot the corrgram is circle.
-   The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red.
-   Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients.
-   The intensity of the colour or also known as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.

#### **6.2 Working with visual geometrics**

n corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.

```{r}
corrplot(wine.cor, 
         method = "ellipse") 
```

#### **6.3 Working with layout**

`corrplor()` supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of `corrplot()`.

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower")
```

The default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower",
         diag = FALSE,
         tl.col = "black")
```

#### **6.4 Working with mixed layout**

With corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the `corrplot.mixed()`, a wrapped function for mixed visualisation style will be used.

Figure below shows a mixed layout corrgram plotted using wine quality data.

```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

The code chunk used to plot the corrgram are shown below.

```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

The arguments `lower` and `upper` are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument `tl.pos`, on the other, is used to specify the placement of the axis label. Lastly, the `diag` argument is used to specify the glyph on the principal diagonal of the corrgram.

#### **6.5 Combining corrgram with the significant test**

With corrplot package, we can use the `cor.mtest()` to compute the p-values and confidence interval for each pair of variables.

```{r}
wine.sig = cor.mtest(wine.cor, conf.level= .95)
```

We can then use the p.mat argument of corrplot function as shown in the code chunk below.

```{r}
corrplot(wine.cor,
         method = "number",
         type = "lower",
         diag = FALSE,
         tl.col = "black",
         tl.srt = 45,
         p.mat = wine.sig$p,
         sig.level = .05)
```

#### **6.6 Reorder a corrgram**

Matrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the `order` argument of `corrplot()`. Currently, corrplot package support four sorting methods, they are:

-   “AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.
-   “FPC” for the first principal component order.
-   “hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.
    -   “hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.
-   “alphabet” for alphabetical order.

“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.

```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               order="AOE",
               tl.col = "black")
```

#### **6.7  Reordering a correlation matrix using hclust**

If using hclust, `corrplot()` can draw rectangles around the corrgram based on the results of hierarchical clustering.

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "ward.D",
         addrect = 3)
```

### **7 References**
[Visual Correlation Analysis](https://r4va.netlify.app/chap06)
