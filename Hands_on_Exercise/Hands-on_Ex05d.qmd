---
title: "Hands-on Exercise 05d: Visual Multivariate Analysis with Parallel Coordinates Plot"
format:
  html:
    fontcolor: '#3b3b3b'
    code-line-numbers: true
author: "Moo Jia Rong"
date: "February 12, 2025"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true 
---

### **1 Overview**

Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them.

In this exercise, we will:

-   plot statistic parallel coordinates plots by using `ggparcoord()` of GGally package,
-   plot interactive parallel coordinates plots by using parcoords package, and
-   plot interactive parallel coordinates plots by using parallelPlot package.

### **2 Getting Started**

In this exercise, we will use the World Happinees 2018 data and the following packages: GGally, parcoords, parallelPlot and tidyverse.

::: panel-tabset

## Loading Packages
```{r}
pacman::p_load(GGally, parallelPlot, tidyverse)
```

## Importing Dataset

```{r}
wh <- read_csv("data/WHData-2018.csv")
```

:::

### **3 Plotting Static Parallel Coordinates Plot**

In this section, we will plot static parallel coordinates plot by using `ggparcoord()` of GGally package. 

#### **3.1  Plotting a simple parallel coordinates**

Code chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using `ggparcoord()`.

```{r}
ggparcoord(data = wh, 
           columns = c(7:12))
```

Notice that only two arguments, namely `data` and `columns` are used. `Data` argument is used to map the data object (i.e. wh) and `columns` is used to select the columns for preparing the parallel coordinates plot.

#### **3.2 Plotting a parallel coordinates with boxplot**

The basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by `ggparcoord()`.

```{r}
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Parallel Coordinates Plot of World Happines Variables")
```

-   `groupColumn` argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.
-   `scale` argument is used to scale the variables in the parallel coordinate plot by using `uniminmax` method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.
-   `alphaLines` argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.
-   `boxplot` argument is used to turn on the boxplot by using logical `TRUE`. The default is `FALSE`.
-   `title` argument is used to provide the parallel coordinates plot a title.


#### **3.3 Parallel coordinates with facet**

Since `ggparcoord()` is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.

In the code chunk below, `facet_wrap()` of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.

```{r}
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~ Region)
```

#### **3.4 Rotating x-axis text label**

To make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using `theme()` function in ggplot2 as shown in the code chunk below.

```{r}
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~ Region) + 
  theme(axis.text.x = element_text(angle = 30))
```

To rotate x-axis text labels, we use axis.text.x as argument to `theme()` function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree.

#### **3.5 Adjusting the rotated x-axis text label**

Rotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with `element_text()`. We use axis.text.x as we want to change the look of x-axis text.

```{r}
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~ Region) + 
  theme(axis.text.x = element_text(angle = 30, hjust=1))
```

### **4 Plotting Interactive Parallel Coordinates Plot: parallelPlot methods**

parallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js. In this section, we will use functions provided in parallelPlot package to build interactive parallel coordinates plot.

#### **4.1 The basic plot**

The code chunk below plot an interactive parallel coordinates plot by using `parallelPlot()`.

```{r}
wh <- wh %>%
  select("Happiness score", c(7:12))
parallelPlot(wh,
             width = 320,
             height = 250)
```

#### **4.2 Rotate axis label**

In the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.

```{r}
parallelPlot(wh,
             rotateTitle = TRUE)
```

#### **4.3 Changing the colour scheme**

We can change the default blue colour scheme by using continousCS argument as shown in the code chunk below.

```{r}
parallelPlot(wh,
             continuousCS = "YlOrRd",
             rotateTitle = TRUE)
```

#### **4.4 Parallel coordinates plot with histogram**

In the code chunk below, `histoVisibility` argument is used to plot histogram along the axis of each variables.

```{r}
histoVisibility <- rep(TRUE, ncol(wh))
parallelPlot(wh,
             rotateTitle = TRUE,
             histoVisibility = histoVisibility)
```

### **5 References**
[ggparcoord() of GGally package](http://ggobi.github.io/ggally/reference/ggparcoord.html)

[parcoords user guide](https://cran.r-project.org/web/packages/parcoords/parcoords.pdf)

[parallelPlot](https://cran.r-project.org/web/packages/parallelPlot/parallelPlot.pdf)